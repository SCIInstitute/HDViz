Software for the paper
----------------------

Samuel Gerber, Peer-Timo Bremer, Valerio Pascucci, Ross Whitaker
"Visual Exploration of High Dimensional Scalar Functions"
IEEE Transactions on Visualization and Computer Graphics to appear, Proceedings of VIS 2010


The software consist of two binaries
1. HDVizProcessing
2. HDViz
The first is for processing a given data set for visualization and the second
for the actual visualization.


Usage of HDVizProcessing:
-------------------------

HDVizProcessing -h will type a help message

The input to HDVizProcessing is a matrix X which represents the samples of the
domain and a corresponding vector which represents the function values f(X) of
each sample. The other parameters are required for Morse-Smale and regression
curve computations.

HDVizProcessing will write a number of files that encode the visualization for
HDViz. 



Usage of HDViz:
---------------

HDViz is for the actual visualization. It needs to be started in the same folder
as HDVizProcessing was run and it will read the files in these folders for
visualization.

HDViz tries to find a default font (DejaVuSans.ttf) if it can't find it you can
supply your own font with -f <path-to-font> (for best results use
    DejaVuSans.ttf).

HDViz tries to read a file names.txt. with the names of the variables in X, one
per line. If not available it will use x_1, ..., x_n as labels.


A typical usage
---------------
The directory examples contains a number of examples.

cd examples/gaussian2d
HDVizProcessing -x Geom.data.hdr -f Function.data.hdr -k 25 -s 0.25 -p 10 -n 50
#This generates the fields for the gaussain2d for 10 persistence level with 50
#samples per curve in each crystal and uses 25 nearest-neighbors for the
#MS-computation.
HDViz -c
#Run HDViz and display curves for each variable



File format
-----------

The matrix and vector file is a simple binary file format with an additional
header file. The header file for the matrix looks as follows:

DenseMatrix
Size: 8 x 1030
ElementSize: 8
RowMajor: 0
DataFile: X.data

First line is the type of matrix (no others than DenseMatrix are required for
    this application)
Second line is the matrix size
Third line is the element size, this application requires doubles (8 bytes)
  unless compiled with the precision set to float.
Fourth line wether the binary data is stored in row or column major format (0 =
    ColumnMajor otherwise RowMajor, default is ColumMajor for ease of
    interaction with lapack)
Fifth line is a reference to the binary file.

The file format for vectors is in the same fashio:

DenseVector
Size: 1030
ElementSize: 8
DataFile: y.data


ConvertCSV takes as input a csv file and an index as a reference to which column
should be treated as function value and outputs a matrix and a vector ready for
use with HDVizProcessing.
